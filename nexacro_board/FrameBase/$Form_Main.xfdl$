<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Form_Main" width="1280" height="720" titletext="New Form" onload="Form_Main_onload">
    <Layouts>
      <Layout height="720" width="1280">
        <Grid id="memberGrid" taborder="0" binddataset="ds_memberList" left="10" top="70" right="10" bottom="80" onitemchanged="memberGrid_onitemchanged">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="100"/>
                <Column size="200"/>
                <Column size="300"/>
                <Column size="100"/>
              </Columns>
              <Rows>
                <Row band="head" size="24"/>
                <Row band="body" size="24"/>
              </Rows>
              <Band id="head">
                <Cell text="id"/>
                <Cell col="1" text="name"/>
                <Cell col="2" text="email"/>
                <Cell col="3" text="관리자"/>
              </Band>
              <Band id="body">
                <!-- id는 수정 불가하게 처리 -->
                <Cell text="bind:id" edittype="none"/>
                <Cell col="1" text="bind:name"/>
                <Cell col="2" text="bind:email"/>
                <Cell col="3" text="bind:isAdmin" edittype="checkbox" displaytype="checkboxcontrol"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btnAddUser" text="유저 추가" left="20" top="650" width="100" height="30" visible="false"/>
        <Button id="btnDeleteUser" text="유저 삭제" left="130" top="650" width="100" height="30" visible="false"/>
        <Button id="btnSaveUser" text="저장" left="880" top="640" width="100" height="30" visible="false" onclick="btnSave_onclick"/>
        <Static id="userName" taborder="3" left="998" top="16" width="265" height="44"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_memberList">
        <ColumnInfo>
          <Column id="id" type="STRING" size="256"/>
          <Column id="name" type="STRING" size="256"/>
          <Column id="email" type="STRING" size="256"/>
          <Column id="isAdmin" type="STRING" size="10"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.Form_Main_onload = function(obj, e) {
    var app = nexacro.getApplication();
    this.userName.set_text("안녕하세요, " + app.login_userName + "님!");

    var ds = this.ds_memberList;  // Dataset

    // If the logged-in user is an admin
    if (app.login_isAdmin) {
        this.btnAddUser.set_visible(true);
        this.btnDeleteUser.set_visible(true);
        this.btnSaveUser.set_visible(true);

        // Admin has full access to modify name, email, and isAdmin
        this.memberGrid.setCellProperty("body", 0, "edittype", "none"); // id is not editable
        this.memberGrid.setCellProperty("body", 1, "edittype", "normal"); // name is editable
        this.memberGrid.setCellProperty("body", 2, "edittype", "normal"); // email is editable
        this.memberGrid.setCellProperty("body", 3, "edittype", "checkbox"); // isAdmin is editable

    } else {
        // Non-admin user (test01)
        this.btnAddUser.set_visible(false);
        this.btnDeleteUser.set_visible(false);
        this.btnSaveUser.set_visible(true);

        // Hide the isAdmin column for non-admin users
        this.memberGrid.setCellProperty("body", 3, "edittype", "none"); // isAdmin is not editable

        // Loop through dataset rows and set edit properties based on conditions
        for (var i = 0; i < ds.getRowCount(); i++) {
            var userId = ds.getColumn(i, "id");

            // Hide the isAdmin column entirely for non-admin users
            if (userId !== app.login_userId) {
                // For other users, block edit for all fields
                this.memberGrid.setCellProperty("body", 0, "edittype", "none", i); // id is not editable
                this.memberGrid.setCellProperty("body", 1, "edittype", "none", i); // name is not editable
                this.memberGrid.setCellProperty("body", 2, "edittype", "none", i); // email is not editable
            } else {
                // Allow editing name and email for the logged-in user (test01)
                this.memberGrid.setCellProperty("body", 0, "edittype", "none", i); // id is not editable
                this.memberGrid.setCellProperty("body", 1, "edittype", "normal", i); // name is editable
                this.memberGrid.setCellProperty("body", 2, "edittype", "normal", i); // email is editable
            }
        }
    }

    this.fn_reload();
};

// Function to reload data from API
this.fn_reload = function() {
    this.transaction(
        "getMembers",
        "http://127.0.0.1:8080/api/members",  // Your API endpoint
        "",
        "ds_memberList=output",
        "",
        "fn_callback",
        "GET"
    );
};

// Save changes function
this.btnSave_onclick = function(obj, e) {
    var ds = this.ds_memberList;
    var changedRows = [];

    for (var i = 0; i < ds.getRowCount(); i++) {
        var rowType = ds.getRowType(i);
        if (rowType == 2 || rowType == 4) {
            var row = {
                id: ds.getColumn(i, "id"),
                name: ds.getColumn(i, "name"),
                email: ds.getColumn(i, "email"),
                isAdmin: ds.getColumn(i, "isAdmin")
            };
            changedRows.push(row);
        }
    }

    if (changedRows.length === 0) {
        alert("🔍 변경된 내용이 없습니다.");
        return;
    }

    // Prepare dataset to send
    if (this.objects.contains("ds_save")) {
        this.removeChild("ds_save");
    }
    var saveDs = new Dataset("ds_save");
    saveDs.addColumn("id", "STRING");
    saveDs.addColumn("name", "STRING");
    saveDs.addColumn("email", "STRING");
    saveDs.addColumn("isAdmin", "STRING");

    for (var j = 0; j < changedRows.length; j++) {
        var r = saveDs.addRow();
        saveDs.setColumn(r, "id", changedRows[j].id);
        saveDs.setColumn(r, "name", changedRows[j].name);
        saveDs.setColumn(r, "email", changedRows[j].email);
        saveDs.setColumn(r, "isAdmin", changedRows[j].isAdmin);
    }

    this.addChild("ds_save", saveDs);

    // Send data to API for update
    this.transaction(
        "update",
        "http://127.0.0.1:8080/api/update",  // Your API endpoint
        "ds_save=ds_save",
        "",
        "",
        "fn_callback",
        "POST"
    );
};

// Callback after API call
this.fn_callback = function(svcID, errorCode, errorMsg) {
    if (svcID == "getMembers") {
        trace("🔁 멤버 목록 로딩 완료");
    } else if (svcID == "update") {
        if (errorCode == 0) {
            alert("✅ 변경사항이 저장되었습니다.");
            this.fn_reload();  // Reload member list after update
        } else {
            alert("❌ 저장 실패: " + errorMsg);
        }
    }
};]]></Script>
  </Form>
</FDL>
