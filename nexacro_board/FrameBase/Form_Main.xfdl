<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Form_Main" width="1280" height="720" titletext="New Form" onload="Form_Main_onload">
    <Layouts>
      <Layout height="720" width="1280">
        <Grid id="memberGrid" taborder="0" binddataset="ds_memberList" left="10" top="70" right="10" bottom="80" oncellclick="memberGrid_oncellclick" oneditclick="memberGrid_oneditclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="100"/>
                <Column size="200"/>
                <Column size="300"/>
                <Column size="100"/>
              </Columns>
              <Rows>
                <Row band="head" size="24"/>
                <Row band="body" size="24"/>
              </Rows>
              <Band id="head">
                <Cell text="id"/>
                <Cell col="1" text="name"/>
                <Cell col="2" text="email"/>
                <Cell col="3" text="관리자"/>
              </Band>
              <Band id="body">
                <Cell text="bind:id" edittype="none"/>
                <Cell col="1" text="bind:name" edittype="normal"/>
                <Cell col="2" text="bind:email" edittype="normal"/>
                <Cell col="3" text="bind:isAdmin" edittype="checkbox" displaytype="checkboxcontrol"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btnAddUser" text="유저 추가" left="20" top="650" width="100" height="30" visible="false"/>
        <Button id="btnDeleteUser" text="유저 삭제" left="130" top="650" width="100" height="30" visible="false"/>
        <Button id="btnSaveUser" text="저장" left="880" top="640" width="100" height="30" visible="false" onclick="btnSave_onclick"/>
        <Static id="userName" taborder="3" left="998" top="16" width="265" height="44"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="ds_memberList">
        <ColumnInfo>
          <Column id="id" type="STRING" size="256"/>
          <Column id="name" type="STRING" size="256"/>
          <Column id="email" type="STRING" size="256"/>
          <Column id="isAdmin" type="STRING" size="10"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.Form_Main_onload = function(obj, e) {
    var app = nexacro.getApplication();
    this.userName.set_text("안녕하세요, " + app.login_userName + "님!");
    this._login_id = app.login_userId;
    this._isAdmin = app.login_isAdmin;
    this.btnSaveUser.set_visible(true);
    this.fn_reload();
};

this.fn_callback = function(svcID, errorCode, errorMsg) { 
    if (svcID === "getMembers") {
        if (errorCode != 0) {
            alert("❌ 멤버 불러오기 실패: " + errorMsg);
            return;
        }

        var isAdmin = this._isAdmin;
        var grid = this.memberGrid;

        grid.setFormatColProperty(0, "size", 0); // ID 숨김

        if (isAdmin === true || isAdmin === "true") {
            grid.setFormatColProperty(3, "size", 100); // 관리자 컬럼 보임
        } else {
            grid.setFormatColProperty(3, "size", 0); // 관리자 컬럼 숨김
        }
    }

    if (svcID === "update") {
        if (errorCode == 0) {
            alert("✅ 변경사항 저장 완료!");
        }
    }
};

// ✅ 사용자가 클릭할 때 편집 가능 여부 판단
this.memberGrid_oncellclick = function(obj, e) {
    var ds = this.ds_memberList;
    var grid = this.memberGrid;
    var loginId = this._login_id;
    var isAdmin = this._isAdmin;

    if (e.row < 0 || e.col < 0) return;

    var rowId = ds.getColumn(e.row, "id");

    if (isAdmin === true || isAdmin === "true") {
        grid.setCellProperty("body", 1, "edittype", "normal");
        grid.setCellProperty("body", 2, "edittype", "normal");
    } else {
        // 본인 행일 경우에만 편집 허용
        if ("" + rowId === "" + loginId) {
            grid.setCellProperty("body", 1, "edittype", "normal");
            grid.setCellProperty("body", 2, "edittype", "normal");
        } else {
            grid.setCellProperty("body", 1, "edittype", "none");
            grid.setCellProperty("body", 2, "edittype", "none");
        }
    }
};

this.fn_reload = function() {
    this.transaction(
        "getMembers",
        "http://127.0.0.1:8080/api/members",
        "",
        "ds_memberList=output",
        "",
        "fn_callback",
        "GET"
    );
};

this.btnSave_onclick = function(obj, e) {
    var ds = this.ds_memberList;
    var changedRows = [];

    for (var i = 0; i < ds.getRowCount(); i++) {
        var rowType = ds.getRowType(i);
        if (rowType == 2 || rowType == 4) {
            changedRows.push({
                id: ds.getColumn(i, "id"),
                name: ds.getColumn(i, "name"),
                email: ds.getColumn(i, "email"),
                isAdmin: ds.getColumn(i, "isAdmin")
            });
        }
    }

	trace("changedRows: " + JSON.stringify(changedRows));
    this.transaction(
        "update",
        "http://127.0.0.1:8080/api/update",
        "",
        "",
        "input=" + JSON.stringify(changedRows),
        "fn_callback",
        "PUT"
    );
};]]></Script>
  </Form>
</FDL>
